********** SORTING **********

Counting sort / Bucket sort: good for things that are bounded by what can be included, for instance sorting a word of only letters. Runs in linear time but only good if the range is small. For instance problem 75: Sort Colors. I think the time is n+m and space is m.

Insertion Sort: for each element, find where it goes relative to the current sorted area. 
                So 12, 11, 13, 5, 6. The first pass we fix 11 and 12. The next pass we fix the 13. 
                Then we add the 5 to the beginning, then the 6. n^2 time as insertion is O(n).
                forloop1: 0 to n-2{
                  forloop2: i+1 to 1{
                    if j < j -1 (element at that) => swap
                    else break; // because we know that left to j is already been sorted, so if the j is not smaller than its prev element
                                   then it must be larger than all of the left-side elements
                  }
                }

Merge sort: recurse down to base cases, merge lists, and bubble up merged lists. Can use pointers to make slightly more efficient. Can also use for merging sorted linked lists or sorted lists. Viewable in 912: Sort an Array. n log n time. Can be done in-place or with n space. Using pointers to determine the range we sort still is n space, but less total memory than re-allocating subarrays every time we divide. Both implementations are listed in 912: Sort an Array. EDIT LATER: My initial guess was the naive recursive merge sort is n space as we have that much space at any time, in place recursive is logN for the stack frame, and I thought there may have been an iterative in place in O(1) space, but I'm not sure these are right now, seems like iterative still uses a stack or something, but I don't know. I tried an in place merge sort but gpt couldn't figure out how to do the in-place merging, I didn't try myself.

Quick sort: pick a pivot, partition based on that pivot. Problem 215 uses a quickselect alg.

Bubble sort: n^2 => worst, n => best, this is a stable sorting algo
             bubble bigger elements up to last. 6, 0, 3, 5. Bubble up the biggest element.
             Compare 6 and 0, bubble 6 up by swapping them. Then compare 6 and 3, and repeat. 
             Then redo the process by finding the second biggest number and bubbling it up.
             first loop: 0 to length - 1
             second loop: 1 to length - i - 1 (after each iteration the last position will have the largest element, so don't need to check that position in next iteration)

              CHECK IF THE ARRAY IS ALREADY SORTED
              by using a boolean value => swapped
              forLoop1{
                swapped = false;
                forLoop2{
                  inside if condition {
                    ...
                    swapped = true;
                  }
                }
                if(!swapped) break; // if it didn't go in the upper loop's condition then that means it was already sorted, hence break
              }

Selection Sort: n^2 (in both worst and best case), this is an unstable sorting algo 
            select(/search) the maximum element from the list and swap it with last
            then redo the process by finding the max element in the rest of the array(except last index) then swap it with second last
            first loop: 0 to length - 2{
              max = 0
              second loop: 1 to length - i - 1{
                compare j index element with max index element
              }
              swap max index element with [length - i - 1] index element
            }

Cyclic Sort: when the elements of array are from 1 to arr.length (1 to n) then use this
             it can sort the array in one pass O(n) time complexity
            int i = 0;
            while(i < arr.length){
                if (arr[i] != i + 1) {
                    int temp = arr[i];
                    arr[i] = arr[arr[i] - 1];
                    arr[temp - 1] = temp;
                }else i++;
            }

      Another soln for Cyclic sort Problems:    (honestly though avoid it, i added this just for a diff prespective)

            Iterate over the array, every time we see a number, say 4, we mark the 4th number (index 3) as a negative(only if it's 
            positive, if it's already -ve that would mean it's seen). 
            If numbers in the range are always positive, we can use a negative to easily indicate that that number (by its index) has been seen. 
            For example: [4, 3, 1, 2, 3], when we see the 4, we make the 2 a -2. Do this for all numbers. 
            Now, we iterate over the array again, and any number that is still positive means there was no number that pointed to that,  
            so we construct our result.

            BUT a problem can come if there are already -ve numbers in the array, then they would conflict with the numbers that we turned -ve
            So for that you could do something like replace them with +ve 1, we can't replace them with 0 because them we won't be able 
            to mark their 'index' as seen, since -0 = 0 hence we'll replace them with 1
            But then what about 1? we won't know if there actually was 1 or not, since we've turned a lot of -ve no.'s as 1
            So for that when in the first loop we turn all the -ve no.'s as 1 we'll also check if there's an actual 1 there or not
            then in second loop, turn the index's value you get from each number to negative
            and then in last loop, skip the 0th index, since it has bee marked -ve unnecessarily by the -ve no.'s that we turned 1
                                   then check if a no. is positive that means it's index has not been seen

Heap sort: Heapify an array in n time by using sift down, starting from the leaves. Then pop in log n time for n elements.

to sort two arrays based on one of them, for instance sort both position = [10,8,0,5,3], speed = [2,4,1,1,3], based on position
we can create an array of tuples of the position and speed pairs:
const tuples = position.map((val, index) => [val, speed[index]]);
then sort tuples based on the values
tuples.sort((a, b) => a[0] - b[0]);
then split them back up


